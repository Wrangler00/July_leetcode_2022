Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

 

Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.
Example 2:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.
Example 3:

Input: root = [1,2], p = 1, q = 2
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [2, 105].
-109 <= Node.val <= 109
All Node.val are unique.
p != q
p and q will exist in the tree.

//cpp

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    TreeNode *ans = nullptr;
public:
    int dfs(TreeNode *node,int &a,int &b){
        if(!node)   return INT_MAX;
        if(ans!=nullptr) return 0;
        
        int x = dfs(node->left,a,b);
        int y = dfs(node->right,a,b);
        
        bool one = false;
        bool two = false;
        
        if(a == x || a == y){
            one = true;    
        }
        
        if(b == x || b == y){
            two = true;
        }
        
        if(one && two){
            ans = node;
            return a;
        }
        
        if(a == node->val){
            if(two) ans = node;
            return a;
        }
        
        if(b == node->val){
            if(one) ans = node;
            return b;
        }
        return one ? a : two ? b : node->val;
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        dfs(root,p->val,q->val);
        return ans;
    }
};
